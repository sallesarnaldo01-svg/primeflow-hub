generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id               String             @id @default(cuid())
  name             String
  settings         Json?
  users            User[]
  queues           Queue[]
  connections      Connection[]
  flows            Flow[]
  campaigns        CampaignPhrase[]
  tags             Tag[]
  stages           Stage[]
  deals            Deal[]
  contacts         Contact[]
  broadcasts       Broadcast[]
  followUps        FollowUp[]
  messageLogs      MessageLog[]
  scrumTeams       ScrumTeam[]
  backlogItems     BacklogItem[]
  aiProviders      AIProvider[]
  aiTools          AITool[]
  knowledgeDocs    KnowledgeDocument[]
  followUpCadences FollowUpCadence[]
  products         Product[]
  customFields     CustomField[]
  aiUsage          AIUsage[]
  conversations    ConversationEvent[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email        String   @unique
  name         String
  role         Role     @default(AGENT)
  passwordHash String?
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tenantId])
  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  AGENT
}

model Queue {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  flows       Flow[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@map("queues")
}

model Connection {
  id         String           @id @default(cuid())
  tenantId   String
  tenant     Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type       ConnectionType
  status     ConnectionStatus @default(DISCONNECTED)
  name       String
  meta       Json?
  campaigns  CampaignPhrase[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([tenantId, type])
  @@map("connections")
}

enum ConnectionType {
  WHATSAPP
  FACEBOOK
  INSTAGRAM
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  ERROR
}

model Flow {
  id          String            @id @default(cuid())
  tenantId    String
  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  status      FlowStatus        @default(DRAFT)
  version     Int               @default(1)
  active      Boolean           @default(true)
  startNodeId String?
  queueId     String?
  queue       Queue?            @relation(fields: [queueId], references: [id])
  variables   Json?
  nodes       FlowNode[]
  edges       FlowEdge[]
  campaigns   CampaignPhrase[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([tenantId, status])
  @@map("flows")
}

enum FlowStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FlowNode {
  id        String   @id @default(cuid())
  flowId    String
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  type      NodeType
  label     String?
  x         Int      @default(0)
  y         Int      @default(0)
  config    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([flowId])
  @@map("flow_nodes")
}

enum NodeType {
  START
  CONTENT
  MENU
  RANDOMIZER
  DELAY
  TICKET
  TYPEBOT
  OPENAI
  CONDITION
  HTTP
  SCHEDULE
  ASSIGN_QUEUE
  SUBFLOW
}

model FlowEdge {
  id        String  @id @default(cuid())
  flowId    String
  flow      Flow    @relation(fields: [flowId], references: [id], onDelete: Cascade)
  sourceId  String
  targetId  String
  condition Json?
  label     String?

  @@index([flowId])
  @@map("flow_edges")
}

model CampaignPhrase {
  id           String     @id @default(cuid())
  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name         String
  flowId       String
  flow         Flow       @relation(fields: [flowId], references: [id])
  connectionId String
  connection   Connection @relation(fields: [connectionId], references: [id])
  phrase       String
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([tenantId, active])
  @@map("campaign_phrases")
}

model Tag {
  id          String       @id @default(cuid())
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  source      TagSource
  color       String?
  contacts    ContactTag[]
  deals       DealTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([tenantId, name, source])
  @@index([tenantId, source])
  @@map("tags")
}

enum TagSource {
  WHATSAPP
  CRM
}

model Contact {
  id        String       @id @default(cuid())
  tenantId  String
  tenant    Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  phone     String?
  email     String?
  avatar    String?
  source    String
  meta      Json?
  tags      ContactTag[]
  deals     Deal[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([tenantId, phone])
  @@map("contacts")
}

model ContactTag {
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([contactId, tagId])
  @@map("contact_tags")
}

model Stage {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  order     Int
  color     String?
  deals     Deal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, order])
  @@index([tenantId])
  @@map("stages")
}

model Deal {
  id        String    @id @default(cuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contactId String
  contact   Contact   @relation(fields: [contactId], references: [id])
  stageId   String
  stage     Stage     @relation(fields: [stageId], references: [id])
  amount    Decimal?  @db.Decimal(10, 2)
  tags      DealTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([tenantId, stageId])
  @@map("deals")
}

model DealTag {
  dealId    String
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([dealId, tagId])
  @@map("deal_tags")
}

model Broadcast {
  id        String          @id @default(cuid())
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  filters   Json
  script    Json
  status    BroadcastStatus @default(DRAFT)
  stats     Json?
  config    Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([tenantId, status])
  @@map("broadcasts")
}

enum BroadcastStatus {
  DRAFT
  RUNNING
  PAUSED
  DONE
  FAILED
}

model FollowUp {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  filters   Json
  triggers  Json
  actions   Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, active])
  @@map("follow_ups")
}

model MessageLog {
  id        String           @id @default(cuid())
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channel   ConnectionType
  direction MessageDirection
  contact   String
  payload   Json
  createdAt DateTime         @default(now())

  @@index([tenantId, channel, createdAt])
  @@map("message_logs")
}

enum MessageDirection {
  IN
  OUT
}

// ============= SCRUM MODELS =============

model ScrumTeam {
  id          String        @id @default(cuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  members     TeamMember[]
  sprints     Sprint[]
  ceremonies  Ceremony[]
  videoCalls  VideoCall[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([tenantId])
  @@map("scrum_teams")
}

model TeamMember {
  id        String     @id @default(cuid())
  teamId    String
  team      ScrumTeam  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  email     String
  role      String?
  avatar    String?
  createdAt DateTime   @default(now())

  @@index([teamId])
  @@map("team_members")
}

model Sprint {
  id                    String        @id @default(cuid())
  teamId                String
  team                  ScrumTeam     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name                  String
  startDate             DateTime
  endDate               DateTime
  status                SprintStatus  @default(PLANNED)
  goal                  String?
  totalStoryPoints      Int           @default(0)
  completedStoryPoints  Int           @default(0)
  backlogItems          BacklogItem[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([teamId, status])
  @@map("sprints")
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

model BacklogItem {
  id          String           @id @default(cuid())
  tenantId    String
  sprintId    String?
  sprint      Sprint?          @relation(fields: [sprintId], references: [id])
  type        BacklogItemType
  title       String
  description String
  points      Int              @default(0)
  priority    Priority         @default(MEDIUM)
  status      BacklogStatus    @default(TODO)
  assignee    String?
  epic        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([tenantId, status])
  @@index([sprintId])
  @@map("backlog_items")
}

enum BacklogItemType {
  STORY
  BUG
  TASK
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum BacklogStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Ceremony {
  id           String        @id @default(cuid())
  teamId       String
  team         ScrumTeam     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name         String
  type         CeremonyType
  scheduledAt  DateTime
  duration     Int           // minutes
  participants String[]
  status       CeremonyStatus @default(SCHEDULED)
  notes        String?
  videoCallId  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([teamId, scheduledAt])
  @@map("ceremonies")
}

enum CeremonyType {
  DAILY
  PLANNING
  REVIEW
  RETROSPECTIVE
}

enum CeremonyStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model VideoCall {
  id          String    @id @default(cuid())
  teamId      String
  team        ScrumTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  roomId      String    @unique
  topic       String
  startedAt   DateTime
  endedAt     DateTime?
  participants String[]
  recordingUrl String?
  createdAt   DateTime  @default(now())

  @@index([teamId])
  @@map("video_calls")
}

// ============= AI MODELS =============

model AIProvider {
  id          String        @id @default(cuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type        AIProviderType
  name        String
  apiKey      String?       // Encrypted
  config      Json?         // Additional settings
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  agents      AIAgent[]

  @@unique([tenantId, type])
  @@index([tenantId, active])
  @@map("ai_providers")
}

enum AIProviderType {
  LOVABLE
  OPENAI
  MANUS
  GEMINI
  CLAUDE
}

model AIAgent {
  id          String      @id @default(cuid())
  tenantId    String
  providerId  String
  provider    AIProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  model       String      // "gpt-4", "gemini-2.5-flash", "claude-opus-4", etc
  systemPrompt String     @db.Text
  temperature Float       @default(0.7)
  maxTokens   Int         @default(2000)
  active      Boolean     @default(true)
  config      Json?       // Tools, functions, etc
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([tenantId, active])
  @@index([providerId])
  @@map("ai_agents")
}

model AITool {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String   // Ex: "puxarCNPJ", "agendar_horario"
  description String   @db.Text // Descrição para o LLM
  endpoint    String   // URL da API
  method      String   // GET, POST, PUT, DELETE
  parameters  Json     // Schema JSON dos parâmetros
  headers     Json?    // Headers customizados
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, name])
  @@index([tenantId, active])
  @@map("ai_tools")
}

model KnowledgeDocument {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name       String
  type       String   // pdf, docx, txt, image, video
  fileUrl    String   // URL do arquivo em storage
  content    String?  @db.Text // Texto extraído
  embeddings Json?    // Vetores de embeddings
  agentId    String?  // Qual agente pode acessar
  tags       String[]
  metadata   Json?    // Metadados adicionais
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([tenantId, agentId])
  @@index([tenantId, type])
  @@map("knowledge_documents")
}

model FollowUpCadence {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String   // "Reativação Flash", "Reativação Demorada"
  trigger   Json     // Condições (ex: lead inativo > 30min)
  steps     Json     // Array de steps com delay e mensagem
  active    Boolean  @default(true)
  agentId   String?  // Agente de IA a usar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, active])
  @@map("followup_cadences")
}

model Product {
  id          String         @id @default(cuid())
  tenantId    String
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String         @db.Text
  price       Decimal        @db.Decimal(10, 2)
  category    String?
  sku         String?
  stock       Int            @default(0)
  active      Boolean        @default(true)
  metadata    Json?
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([tenantId, active])
  @@index([tenantId, category])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  tags      String[] // Ex: ["foto_frente", "interior_veiculo"]
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId])
  @@map("product_images")
}

model CustomField {
  id       String   @id @default(cuid())
  tenantId String
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  entity   String   // "lead", "contact", "deal", "product"
  name     String
  label    String
  type     String   // "text", "number", "date", "select", "boolean"
  options  String[] // Para tipo "select"
  required Boolean  @default(false)
  order    Int      @default(0)
  active   Boolean  @default(true)

  @@unique([tenantId, entity, name])
  @@index([tenantId, entity])
  @@map("custom_fields")
}

model AIUsage {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  agentId          String?
  providerId       String?
  leadId           String?
  conversationId   String?
  model            String   // "gpt-4", "gemini-2.5-flash"
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Decimal  @db.Decimal(10, 6) // Custo em reais
  request          Json?    // Payload completo (opcional)
  response         Json?    // Resposta completa (opcional)
  createdAt        DateTime @default(now())

  @@index([tenantId, leadId])
  @@index([tenantId, agentId])
  @@index([tenantId, createdAt])
  @@map("ai_usage")
}

model ConversationEvent {
  id             String   @id @default(cuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversationId String
  type           String   // "message", "status_change", "ai_action", "transfer", "tool_call"
  actor          String   // "customer", "ai_agent", "human_agent", "system"
  actorId        String?  // ID do agente ou usuário
  actorName      String?
  content        String?  @db.Text
  metadata       Json?
  rating         Int?     // Rating do humano (1-5)
  feedback       String?  // Feedback detalhado
  createdAt      DateTime @default(now())

  @@index([conversationId, createdAt])
  @@index([tenantId, createdAt])
  @@index([tenantId, conversationId])
  @@map("conversation_events")
}
